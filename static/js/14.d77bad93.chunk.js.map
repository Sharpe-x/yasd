{"version":3,"sources":["components/BackButton/index.tsx","components/PageTitle/index.tsx","../node_modules/@sumup/icons/dist/es/ChevronLeft.js","components/PageContainer.tsx","../node_modules/@sumup/icons/dist/es/Spinner.js","pages/Modules/index.tsx"],"names":["BackButton","history","useHistory","onClick","goBack","label","css","PageTitle","props","isAutoRefresh","setIsAutoRefresh","useState","defaultAutoRefreshState","isSticky","useMemo","sticky","useEffect","hasAutoRefresh","onAuthRefreshStateChange","size","noMargin","title","ChevronLeft","React","createElement","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","defaultProps","width","height","viewBox","fill","xmlns","PageContainer","children","Spinner","Page","t","useTranslation","data","modules","error","modulesError","useSWR","fetcher","isLoading","setIsLoading","isChecked","name","enabled","includes","toggle","useCallback","newVal","url","method","then","toast","success","mutate","catch","err","console","finally","available","map","mod","key","labelChecked","labelUnchecked","disabled","checked","onChange"],"mappings":"yLA0BeA,IAjBc,KAC3B,MAAMC,EAAUC,cAEhB,OACE,YAAC,IAAD,CACEC,QAAS,IAAMF,EAAQG,SACvBC,MAAM,OAENC,IAAG,2EAIH,YAAC,IAAD,S,iOCuDSC,IA1D8BC,IAC3C,MAAOC,EAAeC,GAAoBC,oBACxC,4BAAMH,EAAMI,+BAAZ,YAEIC,EAAWC,mBACf,IAA+B,qBAAjBN,EAAMO,QAAgCP,EAAMO,QAC1D,CAACP,EAAMO,SAcT,OAXAC,qBAAU,KACJR,EAAMS,gBAAkBT,EAAMU,0BAChCV,EAAMU,yBAAyBT,KAEhC,CACDA,EACAD,EACAA,EAAMS,eACNT,EAAMU,2BAIN,YAAC,IAAD,CACEC,KAAM,OACNC,UAAQ,EACRd,IAAK,CACHO,EAAQ,4BAAsB,GAD3B,oVAML,mBAEEP,IAAG,0CAIH,YAAC,IAAD,MACA,uBAAME,EAAMa,QAGbb,EAAMS,gBACL,mBACEd,QAAS,IAAMO,GAAkBD,GACjCH,IAAK,CAAC,CAAD,+aAEHG,GAAa,8EAFV,IAQL,YAAC,IAAD,CAASH,IAAK,CAAC,CAAD,gCAAcG,GAAa,6C,iCCrEnD,sDAEIa,EAAc,SAAqBd,GACrC,OAAoBe,IAAMC,cAAc,MAAOhB,EAAoBe,IAAMC,cAAc,OAAQ,CAC7FC,EAAG,gBACHC,OAAQ,eACRC,YAAa,IACbC,cAAe,QACfC,eAAgB,YAIpBP,EAAYQ,aAAe,CACzBC,MAAO,KACPC,OAAQ,KACRC,QAAS,YACTC,KAAM,OACNC,MAAO,+B,iCCjBT,gBAUeC,IAJiB,IAAmB,IAAlB,SAAEC,GAAe,EAChD,OAAO,sEAAyBA,K,iCCPlC,sDAEIC,EAAU,SAAiB9B,GAC7B,OAAoBe,IAAMC,cAAc,MAAOhB,EAAoBe,IAAMC,cAAc,OAAQ,CAC7FC,EAAG,mJACHS,KAAM,mBAIVI,EAAQR,aAAe,CACrBC,MAAO,KACPC,OAAQ,KACRC,QAAS,YACTC,KAAM,OACNC,MAAO,+B,iCCdT,qFAiFeI,UAnEQ,KACrB,MAAM,EAAEC,GAAMC,eACNC,KAAMC,EAASC,MAAOC,GAAiBC,YAC7C,WACAC,MAEKC,EAAWC,GAAgBtC,oBAAS,GAErCuC,EAAaC,IAC0B,KAA7B,OAAPR,QAAO,IAAPA,OAAA,EAAAA,EAASS,QAAQC,SAASF,IAG7BG,EAASC,uBACb,CAACJ,EAAcK,KACbP,GAAa,GAEbF,YAAQ,CACNU,IAAK,WACLC,OAAQ,OACRhB,KAAM,CACJ,CAACS,GAAOK,KAGTG,MAAK,KACJC,IAAMC,QAAQrB,EAAE,+BACTsB,YAAO,eAEfC,OAAOC,IACNJ,IAAMC,QAAQrB,EAAE,8BAChByB,QAAQrB,MAAMoB,MAEfE,SAAQ,KACPjB,GAAa,QAGnB,CAACA,EAAcT,IAGjB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAWnB,MAAOmB,EAAE,kBAEpB,8RACGG,GACCA,EAAQwB,UAAUC,KAAKC,GAEnB,mBAAKC,IAAKD,EAAV,2FACE,6KAAiDA,GACjD,6DACE,YAAC,IAAD,CACEjD,UAAQ,EACRf,MAAM,GACNkE,aAAa,KACbC,eAAe,MACfC,SAAUzB,EACV0B,QAASxB,EAAUmB,GACnBM,SAAU,IAAMrB,EAAOe,GAAMnB,EAAUmB","file":"static/js/14.d77bad93.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { IconButton } from '@sumup/circuit-ui'\nimport { ChevronLeft } from '@sumup/icons'\nimport React from 'react'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport { useHistory } from 'react-router-dom'\n\nconst BackButton: React.FC = () => {\n  const history = useHistory()\n\n  return (\n    <IconButton\n      onClick={() => history.goBack()}\n      label=\"back\"\n      tw=\"w-8 h-8 mr-3 self-center\"\n      css={css`\n        padding: 0.3rem;\n      `}\n    >\n      <ChevronLeft />\n    </IconButton>\n  )\n}\n\nexport default BackButton\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Heading } from '@sumup/circuit-ui'\nimport { Spinner } from '@sumup/icons'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport BackButton from '../BackButton'\n\ninterface PageTitleProps {\n  title: string\n  hasAutoRefresh?: boolean\n  defaultAutoRefreshState?: boolean\n  onAuthRefreshStateChange?: (newState: boolean) => void\n  sticky?: boolean\n}\n\nconst PageTitle: React.FC<PageTitleProps> = (props) => {\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(\n    () => props.defaultAutoRefreshState ?? false,\n  )\n  const isSticky = useMemo(\n    () => (typeof props.sticky === 'undefined' ? true : props.sticky),\n    [props.sticky],\n  )\n\n  useEffect(() => {\n    if (props.hasAutoRefresh && props.onAuthRefreshStateChange) {\n      props.onAuthRefreshStateChange(isAutoRefresh)\n    }\n  }, [\n    isAutoRefresh,\n    props,\n    props.hasAutoRefresh,\n    props.onAuthRefreshStateChange,\n  ])\n\n  return (\n    <Heading\n      size={'tera'}\n      noMargin\n      css={[\n        isSticky ? tw`sticky top-0` : '',\n        tw`flex items-center justify-between shadow bg-white z-10 px-3 py-3`,\n        css``,\n      ]}\n    >\n      <div\n        tw=\"flex items-center\"\n        css={css`\n          padding-left: env(safe-area-inset-left);\n        `}\n      >\n        <BackButton />\n        <div>{props.title}</div>\n      </div>\n\n      {props.hasAutoRefresh && (\n        <div\n          onClick={() => setIsAutoRefresh(!isAutoRefresh)}\n          css={[\n            tw`bg-blue-500 text-white cursor-pointer w-10 h-10 rounded-lg flex items-center justify-center transition-colors duration-200 ease-in-out`,\n            isAutoRefresh && tw`bg-red-400`,\n            css`\n              margin-right: env(safe-area-inset-right);\n            `,\n          ]}\n        >\n          <Spinner css={[tw`w-6 h-6`, isAutoRefresh && tw`animate-spin`]} />\n        </div>\n      )}\n    </Heading>\n  )\n}\n\nexport default PageTitle\n","import React from \"react\";\n\nvar ChevronLeft = function ChevronLeft(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", props, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 4L6 8l4 4\",\n    stroke: \"currentColor\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }));\n};\n\nChevronLeft.defaultProps = {\n  width: \"16\",\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nexport { ChevronLeft };","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport React from 'react'\n\nconst PageContainer: React.FC = ({ children }) => {\n  return <div tw=\"relative pb-5\">{children}</div>\n}\n\nexport default PageContainer\n","import React from \"react\";\n\nvar Spinner = function Spinner(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", props, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2 8a1 1 0 00-2 0h2zm6-8a1 1 0 000 2V0zm6 8a6 6 0 01-6 6v2a8 8 0 008-8h-2zm-6 6a6 6 0 01-6-6H0a8 8 0 008 8v-2zM8 2a6 6 0 016 6h2a8 8 0 00-8-8v2z\",\n    fill: \"currentColor\"\n  }));\n};\n\nSpinner.defaultProps = {\n  width: \"16\",\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nexport { Spinner };","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport React, { useCallback, useState } from 'react'\nimport { Toggle } from '@sumup/circuit-ui'\nimport { useTranslation } from 'react-i18next'\nimport tw from 'twin.macro'\nimport useSWR, { mutate } from 'swr'\nimport { toast } from 'react-toastify'\n\nimport PageContainer from '../../components/PageContainer'\nimport PageTitle from '../../components/PageTitle'\nimport { Modules } from '../../types'\nimport fetcher from '../../utils/fetcher'\n\nconst Page: React.FC = () => {\n  const { t } = useTranslation()\n  const { data: modules, error: modulesError } = useSWR<Modules>(\n    '/modules',\n    fetcher,\n  )\n  const [isLoading, setIsLoading] = useState(false)\n\n  const isChecked = (name: string): boolean => {\n    return modules?.enabled.includes(name) === true\n  }\n\n  const toggle = useCallback(\n    (name: string, newVal: boolean) => {\n      setIsLoading(true)\n\n      fetcher({\n        url: '/modules',\n        method: 'POST',\n        data: {\n          [name]: newVal,\n        },\n      })\n        .then(() => {\n          toast.success(t('common.success_interaction'))\n          return mutate('/modules')\n        })\n        .catch((err) => {\n          toast.success(t('common.failed_interaction'))\n          console.error(err)\n        })\n        .finally(() => {\n          setIsLoading(false)\n        })\n    },\n    [setIsLoading, t],\n  )\n\n  return (\n    <PageContainer>\n      <PageTitle title={t('home.modules')} />\n\n      <div tw=\"divide-y divide-gray-200\">\n        {modules &&\n          modules.available.map((mod) => {\n            return (\n              <div key={mod} tw=\"flex items-center justify-between p-3\">\n                <div tw=\"truncate leading-normal text-gray-700\">{mod}</div>\n                <div tw=\"flex items-center\">\n                  <Toggle\n                    noMargin\n                    label=\"\"\n                    labelChecked=\"on\"\n                    labelUnchecked=\"off\"\n                    disabled={isLoading}\n                    checked={isChecked(mod)}\n                    onChange={() => toggle(mod, !isChecked(mod))}\n                  />\n                </div>\n              </div>\n            )\n          })}\n      </div>\n    </PageContainer>\n  )\n}\n\nexport default Page\n"],"sourceRoot":""}