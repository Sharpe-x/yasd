{"version":3,"sources":["components/BackButton/index.tsx","components/PageTitle/index.tsx","components/FixedFullscreenContainer.tsx","../node_modules/@sumup/icons/dist/es/ChevronLeft.js","../node_modules/@sumup/icons/dist/es/Spinner.js","components/CodeMirrorLoading.tsx","pages/Scripting/Evaluate/index.tsx"],"names":["BackButton","history","useHistory","onClick","goBack","label","css","PageTitle","props","isAutoRefresh","setIsAutoRefresh","useState","defaultAutoRefreshState","isSticky","useMemo","sticky","useEffect","hasAutoRefresh","onAuthRefreshStateChange","size","noMargin","title","FixedFullscreenContainer","offsetBottom","children","ChevronLeft","React","createElement","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","defaultProps","width","height","viewBox","fill","xmlns","Spinner","CodeMirrorLoading","t","useTranslation","CodeMirror","loadable","async","mod","then","Controlled","Promise","all","fallback","Page","code","setCode","isLoading","setIsLoading","result","setResult","timeout","setTimeoutValue","value","options","mode","theme","lineNumbers","tabSize","indentWithTabs","lineWrapping","onBeforeChange","editor","data","fetcher","url","method","script_text","mock_type","res","exception","toast","error","output","catch","err","console","finally","variant","loadingLabel","type","required","onChange","target","Number","isOpen","onClose"],"mappings":"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","file":"static/js/12.240edf31.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { IconButton } from '@sumup/circuit-ui'\nimport { ChevronLeft } from '@sumup/icons'\nimport React from 'react'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport { useHistory } from 'react-router-dom'\n\nconst BackButton: React.FC = () => {\n  const history = useHistory()\n\n  return (\n    <IconButton\n      onClick={() => history.goBack()}\n      label=\"back\"\n      tw=\"w-8 h-8 mr-3 self-center\"\n      css={css`\n        padding: 0.3rem;\n      `}\n    >\n      <ChevronLeft />\n    </IconButton>\n  )\n}\n\nexport default BackButton\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Heading } from '@sumup/circuit-ui'\nimport { Spinner } from '@sumup/icons'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport BackButton from '../BackButton'\n\ninterface PageTitleProps {\n  title: string\n  hasAutoRefresh?: boolean\n  defaultAutoRefreshState?: boolean\n  onAuthRefreshStateChange?: (newState: boolean) => void\n  sticky?: boolean\n}\n\nconst PageTitle: React.FC<PageTitleProps> = (props) => {\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(\n    () => props.defaultAutoRefreshState ?? false,\n  )\n  const isSticky = useMemo(\n    () => (typeof props.sticky === 'undefined' ? true : props.sticky),\n    [props.sticky],\n  )\n\n  useEffect(() => {\n    if (props.hasAutoRefresh && props.onAuthRefreshStateChange) {\n      props.onAuthRefreshStateChange(isAutoRefresh)\n    }\n  }, [\n    isAutoRefresh,\n    props,\n    props.hasAutoRefresh,\n    props.onAuthRefreshStateChange,\n  ])\n\n  return (\n    <Heading\n      size={'tera'}\n      noMargin\n      css={[\n        isSticky ? tw`sticky top-0` : '',\n        tw`flex items-center justify-between shadow bg-white z-10 px-3 py-3`,\n        css``,\n      ]}\n    >\n      <div\n        tw=\"flex items-center\"\n        css={css`\n          padding-left: env(safe-area-inset-left);\n        `}\n      >\n        <BackButton />\n        <div>{props.title}</div>\n      </div>\n\n      {props.hasAutoRefresh && (\n        <div\n          onClick={() => setIsAutoRefresh(!isAutoRefresh)}\n          css={[\n            tw`bg-blue-500 text-white cursor-pointer w-10 h-10 rounded-lg flex items-center justify-center transition-colors duration-200 ease-in-out`,\n            isAutoRefresh && tw`bg-red-400`,\n            css`\n              margin-right: env(safe-area-inset-right);\n            `,\n          ]}\n        >\n          <Spinner css={[tw`w-6 h-6`, isAutoRefresh && tw`animate-spin`]} />\n        </div>\n      )}\n    </Heading>\n  )\n}\n\nexport default PageTitle\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport React from 'react'\n\nconst FixedFullscreenContainer: React.FC<{\n  offsetBottom?: boolean\n}> = (props) => {\n  let offsetBottom = true\n\n  if (typeof props.offsetBottom === 'boolean') {\n    offsetBottom = props.offsetBottom\n  }\n\n  return (\n    <div\n      css={[\n        tw`fixed top-0 right-0 bottom-0 left-0 h-full overflow-hidden`,\n        offsetBottom\n          ? css`\n              padding-bottom: env(safe-area-inset-bottom);\n            `\n          : '',\n      ]}\n    >\n      <div tw=\"w-full h-full flex flex-col\">{props.children}</div>\n    </div>\n  )\n}\n\nexport default FixedFullscreenContainer\n","import React from \"react\";\n\nvar ChevronLeft = function ChevronLeft(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", props, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 4L6 8l4 4\",\n    stroke: \"currentColor\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }));\n};\n\nChevronLeft.defaultProps = {\n  width: \"16\",\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nexport { ChevronLeft };","import React from \"react\";\n\nvar Spinner = function Spinner(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", props, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2 8a1 1 0 00-2 0h2zm6-8a1 1 0 000 2V0zm6 8a6 6 0 01-6 6v2a8 8 0 008-8h-2zm-6 6a6 6 0 01-6-6H0a8 8 0 008 8v-2zM8 2a6 6 0 016 6h2a8 8 0 00-8-8v2z\",\n    fill: \"currentColor\"\n  }));\n};\n\nSpinner.defaultProps = {\n  width: \"16\",\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nexport { Spinner };","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport tw from 'twin.macro'\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nconst CodeMirrorLoading = (): JSX.Element => {\n  const { t } = useTranslation()\n\n  return (\n    <div tw=\"h-full flex items-center justify-center text-sm text-gray-500\">\n      {t('common.is_loading')}...\n    </div>\n  )\n}\n\nexport default CodeMirrorLoading\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport loadable from '@loadable/component'\nimport React, { useState } from 'react'\nimport styled from '@emotion/styled/macro'\nimport { IControlledCodeMirror } from 'react-codemirror2'\nimport { useTranslation } from 'react-i18next'\nimport tw from 'twin.macro'\nimport {\n  Input,\n  LoadingButton,\n  Modal,\n  ModalHeader,\n  ModalWrapper,\n} from '@sumup/circuit-ui'\nimport { toast } from 'react-toastify'\n\nimport CodeMirrorLoading from '../../../components/CodeMirrorLoading'\nimport FixedFullscreenContainer from '../../../components/FixedFullscreenContainer'\nimport PageTitle from '../../../components/PageTitle'\nimport { EvaluateResult } from '../../../types'\nimport fetcher from '../../../utils/fetcher'\n\nconst CodeMirror = loadable<IControlledCodeMirror>(\n  async () => {\n    const mod = await import('react-codemirror2').then((mod) => mod.Controlled)\n\n    await Promise.all([\n      // @ts-ignore\n      import('codemirror/lib/codemirror.css'),\n      // @ts-ignore\n      import('codemirror/theme/material.css'),\n      // @ts-ignore\n      import('codemirror/mode/javascript/javascript'),\n    ])\n\n    return mod\n  },\n  {\n    fallback: <CodeMirrorLoading />,\n  },\n)\n\nconst Page: React.FC = () => {\n  const { t } = useTranslation()\n  const [code, setCode] = useState<string>(() =>\n    t('scripting.editor_placeholder'),\n  )\n  const [isLoading, setIsLoading] = useState(false)\n  const [result, setResult] = useState<string>()\n  const [timeout, setTimeoutValue] = useState<number>(5)\n\n  const evaluate = () => {\n    if (isLoading) return\n\n    if (!code) {\n      toast.error(t('scripting.empty_code_error'))\n      return\n    }\n\n    setIsLoading(true)\n\n    fetcher<EvaluateResult>({\n      url: '/scripting/evaluate',\n      method: 'POST',\n      data: {\n        script_text: code,\n        mock_type: 'cron',\n        timeout,\n      },\n      timeout: timeout * 1000 + 500,\n    })\n      .then((res) => {\n        if (res.exception) {\n          toast.error(res.exception)\n        } else {\n          setResult(res.output)\n        }\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n      .finally(() => {\n        setIsLoading(false)\n      })\n  }\n\n  return (\n    <FixedFullscreenContainer>\n      <PageTitle title={t('scripting.debug_script_button_title')} />\n\n      <div tw=\"h-full flex flex-col overflow-hidden\">\n        <div tw=\"h-full overflow-auto\">\n          <CodeMirror\n            css={[\n              tw`h-full text-xs`,\n              css`\n                & > .CodeMirror {\n                  height: 100%;\n                  font-family: Menlo, Monaco, Consolas, 'Liberation Mono',\n                    'Courier New', monospace;\n                }\n              `,\n            ]}\n            value={code}\n            options={{\n              mode: 'javascript',\n              theme: 'material',\n              lineNumbers: true,\n              tabSize: 2,\n              indentWithTabs: false,\n              lineWrapping: true,\n            }}\n            onBeforeChange={(editor, data, value) => {\n              setCode(value)\n            }}\n          />\n        </div>\n        <div\n          css={[\n            tw`flex items-center border-t border-solid border-gray-200 py-3 px-3`,\n          ]}\n        >\n          <LoadingButton\n            onClick={evaluate}\n            variant=\"primary\"\n            size=\"kilo\"\n            isLoading={isLoading}\n            loadingLabel={t('scripting.running')}\n          >\n            {t('scripting.run_script_button_title')}\n          </LoadingButton>\n\n          <div\n            css={[\n              tw`ml-4`,\n              css`\n                padding-bottom: 1px;\n\n                & input {\n                  border-radius: 4px;\n                  ${tw`px-2 py-1 text-sm leading-none`}\n                }\n              `,\n            ]}\n          >\n            <Input\n              type=\"number\"\n              required\n              noMargin\n              label={t('scripting.timeout')}\n              value={timeout}\n              onChange={({ target }) =>\n                setTimeoutValue(Number((target as HTMLInputElement).value))\n              }\n            />\n          </div>\n        </div>\n      </div>\n\n      <Modal\n        isOpen={!!result}\n        onClose={() => {\n          setResult('')\n        }}\n      >\n        {({ onClose }) => (\n          <ModalWrapper>\n            <ModalHeader title={t('scripting.result')} onClose={onClose} />\n            <div>\n              <pre\n                tw=\"font-mono text-xs text-gray-600 bg-gray-200 leading-tight p-3 whitespace-pre-wrap break-words\"\n                css={css`\n                  min-height: 7rem;\n                `}\n              >\n                {result}\n              </pre>\n            </div>\n          </ModalWrapper>\n        )}\n      </Modal>\n    </FixedFullscreenContainer>\n  )\n}\n\nexport default Page\n"],"sourceRoot":""}