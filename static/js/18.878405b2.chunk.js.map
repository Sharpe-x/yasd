{"version":3,"sources":["components/BackButton/index.tsx","components/PageTitle/index.tsx","components/FixedFullscreenContainer.tsx","pages/Requests/components/MethodBadge.tsx","pages/Requests/components/ListItem.tsx","pages/Requests/components/RequestModal.tsx","pages/Requests/index.tsx"],"names":["BackButton","history","useHistory","onClick","goBack","label","css","PageTitle","props","isAutoRefresh","setIsAutoRefresh","useState","defaultAutoRefreshState","isSticky","useMemo","sticky","useEffect","hasAutoRefresh","onAuthRefreshStateChange","size","noMargin","title","FixedFullscreenContainer","offsetBottom","children","MethodBadge","failed","method","status","args","isTruthy","toUpperCase","ListItem","req","t","useTranslation","Fragment","URL","id","dayjs","unix","startDate","format","policyName","bytes","inBytes","outBytes","str","toLowerCase","replace","TabsWrapper","RequestModal","onClose","killRequest","useCallback","fetcher","url","data","then","toast","success","Promise","all","mutate","catch","err","error","console","ModalWrapper","ModalHeader","Data","completed","completedDate","diff","pid","processPath","trimPath","rule","localAddress","remoteAddress","href","target","rel","Search","notes","join","isFalsy","requestHeader","timingRecords","map","item","index","key","name","durationInMillisecond","basename","Page","setModal","useModal","profile","useProfile","group","setGroup","recentRequestsResponse","requestsError","useSWR","revalidateOnFocus","revalidateOnReconnect","dedupingInterval","refreshInterval","platform","requestList","setRequestList","activeRequestList","setActiveRequestList","currentList","query","URLSearchParams","useLocation","search","sourceIp","get","requests","pendingList","now","Date","newList","length","request","pop","existingIndex","findIndex","Object","assign","omit","lastUpdated","unshift","push","filter","sourceAddress","slice","sort","a","b","openRequestDetail","rowRenderer","isScrolling","isVisible","style","newState","width","height","rowCount","rowHeight","outline","SelectorGroup","onChange","event","value","options"],"mappings":"yLA0BeA,IAjBc,KAC3B,MAAMC,EAAUC,cAEhB,OACE,YAAC,IAAD,CACEC,QAAS,IAAMF,EAAQG,SACvBC,MAAM,OAENC,IAAG,2EAIH,YAAC,IAAD,S,iOCuDSC,IA1D8BC,IAC3C,MAAOC,EAAeC,GAAoBC,oBACxC,4BAAMH,EAAMI,+BAAZ,YAEIC,EAAWC,mBACf,IAA+B,qBAAjBN,EAAMO,QAAgCP,EAAMO,QAC1D,CAACP,EAAMO,SAcT,OAXAC,qBAAU,KACJR,EAAMS,gBAAkBT,EAAMU,0BAChCV,EAAMU,yBAAyBT,KAEhC,CACDA,EACAD,EACAA,EAAMS,eACNT,EAAMU,2BAIN,YAAC,IAAD,CACEC,KAAM,OACNC,UAAQ,EACRd,IAAK,CACHO,EAAQ,4BAAsB,GAD3B,oVAML,mBAEEP,IAAG,0CAIH,YAAC,IAAD,MACA,uBAAME,EAAMa,QAGbb,EAAMS,gBACL,mBACEd,QAAS,IAAMO,GAAkBD,GACjCH,IAAK,CAAC,CAAD,+aAEHG,GAAa,8EAFV,IAQL,YAAC,IAAD,CAASH,IAAK,CAAC,CAAD,gCAAcG,GAAa,6C,6HCtCpCa,IAvBTd,IACJ,IAAIe,GAAe,EAMnB,MAJkC,mBAAvBf,EAAMe,eACfA,EAAef,EAAMe,cAIrB,mBACEjB,IAAK,CAAC,CAAD,wFAEHiB,EAAY,EAIR,KAGN,2FAAuCf,EAAMgB,a,iSCSpCC,MAvBV,IAA0C,IAAzC,OAAEC,EAAF,OAAUC,EAAV,OAAkBC,KAAWC,GAAW,EAC5C,OACE,mCACMA,EADN,CAEEvB,IAAK,CAAC,CAAD,oKAOHwB,YAASJ,GAAT,8EAEe,WAAXE,EAAA,6JAKLD,EAAOI,gB,+CC6BCC,MA9CkC,IAAc,IAAb,IAAEC,GAAU,EAC5D,MAAM,EAAEC,GAAMC,cAKd,OACE,YAAC,IAAMC,SAAP,KACE,2GAA4BH,EAAII,KAChC,mBACE/B,IAAK,CAAC,CAAD,qHAOL,YAAC,EAAD,CACEqB,OAAQM,EAAIN,OACZD,OAAQO,EAAIP,OACZE,OAAQK,EAAIL,SAEd,qEAAyBK,EAAIK,IAC7B,iEACE,+BACA,wBAAOC,IAAMC,KAAKP,EAAIQ,WAAWC,OAAO,cAEzCT,EAAIU,WACH,iEACE,+BACA,wBAAOV,EAAIU,aAEX,KACJ,iEACE,+BACA,wBAAOC,IAAMX,EAAIY,QAAUZ,EAAIa,YAEjC,iEACE,+BACA,wBAAOZ,EAAG,YApCOa,EAoCoBd,EAAIL,OAnC/CmB,EAAIC,cAAcC,QAAQ,MAAO,YADVF,O,8ECO3B,MAAMG,EAAW,qwB,oLA+MFC,MA1LmC,IAAuB,IAAtB,IAAElB,EAAF,QAAOmB,GAAc,EACtE,MAAM,EAAElB,GAAMC,cAERkB,EAAcC,uBACjBhB,IACCiB,YAAQ,CACNC,IAAK,iBACL7B,OAAQ,OACR8B,KAAM,CACJnB,QAGDoB,MAAK,KACJC,IAAMC,QAAQ1B,EAAE,+BAET2B,QAAQC,IAAI,CACjBC,YAAO,oBACPA,YAAO,yBAGVC,OAAOC,IACNN,IAAMO,MAAMhC,EAAE,8BACdiC,QAAQD,MAAMD,QAGpB,CAAC/B,IAGH,OACE,YAACkC,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAahD,MAAQ,YAAWY,EAAIK,MAAOc,QAASA,IAEpD,mBAAK9C,IAAK,CAAC,CAAD,8EACR,YAAC,EAAD,CACEA,IAAG,EAGHqB,OAAQM,EAAIN,OACZD,OAAQO,EAAIP,OACZE,OAAQK,EAAIL,SAEd,4JAAsDK,EAAII,MAG5D,YAACa,EAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,KAAMhB,EAAE,yBACR,YAAC,IAAD,KAAMA,EAAE,yBACR,YAAC,IAAD,KAAMA,EAAE,yBAGV,YAAC,IAAD,KACE,YAACoC,EAAA,EAAD,KACE,YAACA,EAAA,EAAD,2BACE,uBAAMpC,EAAE,kBACR,uBAAMK,IAAMC,KAAKP,EAAIQ,WAAWC,OAAO,WAEzC,YAAC4B,EAAA,EAAD,2BACE,uBAAMpC,EAAE,oBACR,uBAAMD,EAAIL,SAGXE,YAASG,EAAIsC,YACZ,YAACD,EAAA,EAAD,2BACE,uBAAMpC,EAAE,sBACR,uBACGK,IACEC,KAAKP,EAAIuC,eACTC,KAAKlC,IAAMC,KAAKP,EAAIQ,YAHzB,OASS,IAAZR,EAAIyC,KAAazC,EAAI0C,aACpB,YAACL,EAAA,EAAD,2BACE,uBAAMpC,EAAE,qBACR,uBACG0C,EAAS3C,EAAI0C,aADhB,IAC+B1C,EAAIyC,IADnC,OAON,YAACJ,EAAA,EAAD,KACE,YAACA,EAAA,EAAD,2BACE,uBAAMpC,EAAE,yBACR,uBAAMD,EAAIU,aAEZ,YAAC2B,EAAA,EAAD,2BACE,uBAAMpC,EAAE,uBACR,uBAAMD,EAAI4C,UAIX5C,EAAI6C,gBAAkB7C,EAAI8C,eAC3B,YAACT,EAAA,EAAD,CAAWjD,MAAOa,EAAE,qBAClB,YAACoC,EAAA,EAAD,2BACE,uBAAMpC,EAAE,sBACR,uBAAMD,EAAI6C,eAEZ,YAACR,EAAA,EAAD,2BACE,uBAAMpC,EAAE,uBACR,uBACE,iBACE8C,KAAO,oBAAmB/C,EAAI8C,gBAC9BE,OAAO,SACPC,IAAI,uBAEJ,YAACC,EAAA,EAAD,CAEE7E,IAAG,gFAIJ2B,EAAI8C,kBAOf,YAACT,EAAA,EAAD,CAAWjD,MAAOa,EAAE,qBAClB,YAACoC,EAAA,EAAD,2BACE,uBAAMpC,EAAE,sBACR,uBAAMU,IAAMX,EAAIY,WAElB,YAACyB,EAAA,EAAD,2BACE,uBAAMpC,EAAE,oBACR,uBAAMU,IAAMX,EAAIa,aAIpB,YAACwB,EAAA,EAAD,CAAWjD,MAAOa,EAAE,oBAClB,mBAEE5B,IAAG,qQAIF2B,EAAImD,OAASnD,EAAImD,MAAMC,KAAK,QAIhCC,YAAQrD,EAAIsC,YAA6B,QAAftC,EAAIN,QAC7B,YAAC2C,EAAA,EAAD,CAAWjD,MAAM,UACf,yNAEElB,QAAS,IAAMkD,EAAYpB,EAAIK,KAE9BJ,EAAE,yCAJL,SAUN,YAAC,IAAD,KACE,YAACoC,EAAA,EAAD,CAAWjD,MAAOa,EAAE,kCAClB,mBAEE5B,IAAG,qQAIF2B,EAAIsD,eAAiB,MAI5B,YAAC,IAAD,KACE,YAACjB,EAAA,EAAD,KACGrC,EAAIuD,eACHvD,EAAIuD,cAAcC,KAAI,CAACC,EAAMC,IAC3B,YAACrB,EAAA,EAAD,CAAasB,IAAKD,EAAlB,0BACE,uBAAMD,EAAKG,MACX,uBAAMH,EAAKI,sBAAX,eAapB,MAAMlB,EAAY7B,GAAwBgD,mBAAShD,G,iJC2CpCiD,UAjPQ,KACrB,MAAM,SAAEC,GAAaC,eACf,EAAEhE,GAAMC,cACRgE,EAAUC,eACT3F,EAAeC,GAAoBC,oBAAkB,IACrD0F,EAAOC,GAAY3F,mBAA8B,WAChD8C,KAAM8C,EAAwBrC,MAAOsC,GAC3CC,aAAuB,IAAM,aAAeJ,GAAO9C,IAAS,CAC1DmD,mBAAmB,EACnBC,uBAAuB,EACvBC,iBAAkB,IAClBC,gBAAiBpG,EACS,WAAf,OAAP0F,QAAO,IAAPA,OAAA,EAAAA,EAASW,UACP,IACA,IACF,KAEDC,EAAaC,GAAkBrG,mBAA6B,KAC5DsG,EAAmBC,GAAwBvG,mBAEhD,IACIwG,EAAcrG,mBAClB,IAAiB,WAAVuF,EAAqBU,EAAcE,GAC1C,CAACZ,EAAOU,EAAaE,IAEjBG,EA5BC,IAAIC,gBAAgBC,cAAcC,QA6BnCC,EAAW1G,mBAAuB,IAAMsG,EAAMK,IAAI,WAAW,CAACL,IAEpEpG,qBACE,KACE,KAAI,OAACuF,QAAD,IAACA,OAAD,EAACA,EAAwBmB,UAAU,OAEvC,MAAMC,EAAc,IAAIpB,EAAuBmB,UACzCE,EAAM,IAAIC,KAChB,IAAIC,EAAU,IAAIX,GAElB,KAAOQ,EAAYI,QAAQ,CACzB,MAAMC,EAAUL,EAAYM,MACtBC,EAAgBJ,EAAQK,WAC3BzC,GAASA,EAAKpD,KAAO0F,EAAQ1F,KAG5B4F,GAAiB,EACnBE,OAAOC,OAAOP,EAAQI,GAAgB,IACjCI,YAAKN,EAAS,CAAC,OAClBO,YAAaX,IAGXE,EAAQC,QAAUC,EAAQ1F,GAAKwF,EAAQ,GAAGxF,GAC5CwF,EAAQU,QAAQ,IACXR,EACHO,YAAaX,IAGfE,EAAQW,KAAK,IACRT,EACHO,YAAaX,IAOnBE,EADY,WAAVzB,EACQyB,EACPY,QAAQV,IACHR,GACKA,IAAaQ,EAAQW,gBAI/BC,MAAM,EA5EM,KA8ELd,EACPY,QAAQV,GACHR,EAEAQ,EAAQO,cAAgBX,GACxBJ,IAAaQ,EAAQW,cAGlBX,EAAQO,cAAgBX,IAEhCiB,MAAK,CAACC,EAAGC,IAAMA,EAAEzG,GAAKwG,EAAExG,KAGf,WAAV+D,GACFW,EAAec,GACfZ,EAAqB,MAErBF,EAAe,IACfE,EAAqBY,MAIzB,CAACvB,EAAwBF,EAAOmB,IAGlC,MAAMwB,EAAoB1F,uBACvBrB,IACCgE,EAAS,CACPzE,SAAS,GAAc,IAAd,QAAE4B,GAAW,EACpB,OAAOA,EACL,YAAC,EAAD,CAAcnB,IAAKA,EAAKmB,QAASA,IAEjC,YAAC,IAAMhB,SAAP,OAGJgB,gBAKJ,CAAC6C,IAGGgD,EAA+B3F,uBACnC,IAMO,IANN,IACCsC,EADD,MAECD,EAFD,YAGCuD,EAHD,UAICC,EAJD,MAKCC,GACI,EACJ,MAAMnH,EAAMkF,EAAYxB,GAExB,OACE,mBACEC,IAAKA,EACLwD,MAAOA,EACPjJ,QAAS,IAAM6I,EAAkB/G,GAEjC3B,IAAG,wNAKH,YAAC,EAAD,CAAU2B,IAAKA,OAIrB,CAACkF,EAAa6B,IAGhB,OACE,YAAC1H,EAAA,EAAD,KACE,YAAC,IAAMc,SAAP,KACE,YAAC7B,EAAA,EAAD,CACEc,MAAOa,EAAE,iBACTjB,gBAAgB,EAChBL,yBAAyB,EACzBM,yBAA2BmI,GAAa3I,EAAiB2I,KAG3D,wCACG9C,EACCY,EAAYY,OACV,YAAC,IAAD,MACG,IAAwB,IAAvB,MAAEuB,EAAF,OAASC,GAAa,EACtB,OACE,YAAC,IAAD,CACED,MAAOA,EACPC,OAAQA,EACRC,SAAUrC,EAAYY,OACtB0B,UAAW,GACXR,YAAaA,EACbG,MAAO,CACLM,QAAS,QAEXpJ,IAAG,uSAUX,yLACG4B,EAAE,mBAIP,yLACGA,EAAE,qBADL,QAMJ,mBACE5B,IAAK,CAAC,CAAD,ilBAYL,YAACqJ,EAAA,EAAD,CACErJ,IAAK,CAAC,CAAD,oSAWLD,MAAM,8BACNwF,KAAK,iBACL+D,SAAWC,IACTvD,GAAS,KACP,MAAM+C,EAAWQ,EAAM5E,OAAO6E,MAE9B,OADA/F,YAAO,aAAesF,GACfA,MAGXU,QAAS,CACP,CACEvI,SAAUU,EAAE,mBACZ4H,MAAO,UAET,CACEtI,SAAUU,EAAE,mBACZ4H,MAAO,WAGXA,MAAOzD","file":"static/js/18.878405b2.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { IconButton } from '@sumup/circuit-ui'\nimport { ChevronLeft } from '@sumup/icons'\nimport React from 'react'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport { useHistory } from 'react-router-dom'\n\nconst BackButton: React.FC = () => {\n  const history = useHistory()\n\n  return (\n    <IconButton\n      onClick={() => history.goBack()}\n      label=\"back\"\n      tw=\"w-8 h-8 mr-3 self-center\"\n      css={css`\n        padding: 0.3rem;\n      `}\n    >\n      <ChevronLeft />\n    </IconButton>\n  )\n}\n\nexport default BackButton\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Heading } from '@sumup/circuit-ui'\nimport { Spinner } from '@sumup/icons'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport BackButton from '../BackButton'\n\ninterface PageTitleProps {\n  title: string\n  hasAutoRefresh?: boolean\n  defaultAutoRefreshState?: boolean\n  onAuthRefreshStateChange?: (newState: boolean) => void\n  sticky?: boolean\n}\n\nconst PageTitle: React.FC<PageTitleProps> = (props) => {\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(\n    () => props.defaultAutoRefreshState ?? false,\n  )\n  const isSticky = useMemo(\n    () => (typeof props.sticky === 'undefined' ? true : props.sticky),\n    [props.sticky],\n  )\n\n  useEffect(() => {\n    if (props.hasAutoRefresh && props.onAuthRefreshStateChange) {\n      props.onAuthRefreshStateChange(isAutoRefresh)\n    }\n  }, [\n    isAutoRefresh,\n    props,\n    props.hasAutoRefresh,\n    props.onAuthRefreshStateChange,\n  ])\n\n  return (\n    <Heading\n      size={'tera'}\n      noMargin\n      css={[\n        isSticky ? tw`sticky top-0` : '',\n        tw`flex items-center justify-between shadow bg-white z-10 px-3 py-3`,\n        css``,\n      ]}\n    >\n      <div\n        tw=\"flex items-center\"\n        css={css`\n          padding-left: env(safe-area-inset-left);\n        `}\n      >\n        <BackButton />\n        <div>{props.title}</div>\n      </div>\n\n      {props.hasAutoRefresh && (\n        <div\n          onClick={() => setIsAutoRefresh(!isAutoRefresh)}\n          css={[\n            tw`bg-blue-500 text-white cursor-pointer w-10 h-10 rounded-lg flex items-center justify-center transition-colors duration-200 ease-in-out`,\n            isAutoRefresh && tw`bg-red-400`,\n            css`\n              margin-right: env(safe-area-inset-right);\n            `,\n          ]}\n        >\n          <Spinner css={[tw`w-6 h-6`, isAutoRefresh && tw`animate-spin`]} />\n        </div>\n      )}\n    </Heading>\n  )\n}\n\nexport default PageTitle\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport React from 'react'\n\nconst FixedFullscreenContainer: React.FC<{\n  offsetBottom?: boolean\n}> = (props) => {\n  let offsetBottom = true\n\n  if (typeof props.offsetBottom === 'boolean') {\n    offsetBottom = props.offsetBottom\n  }\n\n  return (\n    <div\n      css={[\n        tw`fixed top-0 right-0 bottom-0 left-0 h-full overflow-hidden`,\n        offsetBottom\n          ? css`\n              padding-bottom: env(safe-area-inset-bottom);\n            `\n          : '',\n      ]}\n    >\n      <div tw=\"w-full h-full flex flex-col\">{props.children}</div>\n    </div>\n  )\n}\n\nexport default FixedFullscreenContainer\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport React from 'react'\nimport tw from 'twin.macro'\n\nimport { isTruthy } from '../../../utils'\n\nconst MethodBadge: React.FC<{\n  failed: 1 | 0 | boolean\n  method: string\n  status: string\n}> = ({ failed, method, status, ...args }) => {\n  return (\n    <div\n      {...args}\n      css={[\n        tw`rounded px-1 text-white inline-block`,\n        css`\n          height: 1rem;\n          line-height: 1rem;\n          font-size: 0.5rem;\n        `,\n        isTruthy(failed)\n          ? tw`bg-red-500`\n          : status === 'Active'\n          ? tw`bg-green-500`\n          : tw`bg-blue-500`,\n      ]}\n    >\n      {method.toUpperCase()}\n    </div>\n  )\n}\n\nexport default MethodBadge\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport bytes from 'bytes'\nimport dayjs from 'dayjs'\nimport { useTranslation } from 'react-i18next'\nimport tw from 'twin.macro'\nimport React from 'react'\n\nimport { RequestItem } from '../../../types'\nimport MethodBadge from './MethodBadge'\n\nconst ListItem: React.FC<{ req: RequestItem }> = ({ req }) => {\n  const { t } = useTranslation()\n\n  const formatStatusKey = (str: string): string =>\n    str.toLowerCase().replace(/\\s/g, '_')\n\n  return (\n    <React.Fragment>\n      <div tw=\"text-sm truncate\">{req.URL}</div>\n      <div\n        css={[\n          tw`flex items-center leading-none truncate`,\n          css`\n            height: 1.5rem;\n          `,\n        ]}\n      >\n        <MethodBadge\n          method={req.method}\n          failed={req.failed}\n          status={req.status}\n        />\n        <div tw=\"text-xs ml-1\">#{req.id}</div>\n        <div tw=\"text-xs ml-1\">\n          <span> - </span>\n          <span>{dayjs.unix(req.startDate).format('HH:mm:ss')}</span>\n        </div>\n        {req.policyName ? (\n          <div tw=\"text-xs ml-1\">\n            <span> - </span>\n            <span>{req.policyName}</span>\n          </div>\n        ) : null}\n        <div tw=\"text-xs ml-1\">\n          <span> - </span>\n          <span>{bytes(req.inBytes + req.outBytes)}</span>\n        </div>\n        <div tw=\"text-xs ml-1\">\n          <span> - </span>\n          <span>{t(`requests.${formatStatusKey(req.status)}`)}</span>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default ListItem\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport bytes from 'bytes'\nimport dayjs from 'dayjs'\nimport { basename } from 'path'\nimport { useTranslation } from 'react-i18next'\nimport { mutate } from 'swr'\nimport tw from 'twin.macro'\nimport { ModalHeader, ModalWrapper } from '@sumup/circuit-ui'\nimport { Search } from '@sumup/icons'\nimport React, { KeyboardEvent, MouseEvent, useCallback } from 'react'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\nimport { toast } from 'react-toastify'\nimport 'react-tabs/style/react-tabs.css'\n\nimport { DataGroup, DataRowMain } from '../../../components/Data'\nimport { RequestItem } from '../../../types'\nimport { isFalsy, isTruthy } from '../../../utils'\nimport fetcher from '../../../utils/fetcher'\nimport MethodBadge from './MethodBadge'\n\nconst TabsWrapper = styled.div`\n  .react-tabs__tab {\n    ${tw`text-sm font-medium border-none transition-colors duration-200 ease-in-out active:shadow-none active:border-none focus:shadow-none focus:border-none`}\n  }\n  .react-tabs__tab--selected {\n    ${tw`text-blue-500 bg-blue-100 border-none`}\n  }\n  .react-tabs__tab-list {\n    ${tw`border-b-2 border-blue-100 mb-4`}\n  }\n  .react-tabs__tab-panel {\n    height: 25rem;\n    overflow: auto;\n  }\n`\n\ninterface RequestModalProps {\n  req: RequestItem\n  onClose: (event?: MouseEvent | KeyboardEvent) => void\n}\n\nconst RequestModal: React.FC<RequestModalProps> = ({ req, onClose }) => {\n  const { t } = useTranslation()\n\n  const killRequest = useCallback(\n    (id: number) => {\n      fetcher({\n        url: '/requests/kill',\n        method: 'POST',\n        data: {\n          id,\n        },\n      })\n        .then(() => {\n          toast.success(t('common.success_interaction'))\n\n          return Promise.all([\n            mutate('/requests/recent'),\n            mutate('/requests/active'),\n          ])\n        })\n        .catch((err) => {\n          toast.error(t('common.failed_interaction'))\n          console.error(err)\n        })\n    },\n    [t],\n  )\n\n  return (\n    <ModalWrapper>\n      <ModalHeader title={`Detail (#${req.id})`} onClose={onClose} />\n\n      <div css={[tw`mb-3 flex items-center leading-normal`]}>\n        <MethodBadge\n          css={css`\n            margin-top: 4px;\n          `}\n          method={req.method}\n          failed={req.failed}\n          status={req.status}\n        />\n        <div tw=\"truncate text-base font-medium flex-1 ml-1\">{req.URL}</div>\n      </div>\n\n      <TabsWrapper>\n        <Tabs>\n          <TabList>\n            <Tab>{t('requests.general_tab')}</Tab>\n            <Tab>{t('requests.request_tab')}</Tab>\n            <Tab>{t('requests.timing_tab')}</Tab>\n          </TabList>\n\n          <TabPanel>\n            <DataGroup>\n              <DataRowMain tw=\"text-sm\">\n                <div>{t('requests.date')}</div>\n                <div>{dayjs.unix(req.startDate).format('L LTS')}</div>\n              </DataRowMain>\n              <DataRowMain tw=\"text-sm\">\n                <div>{t('requests.status')}</div>\n                <div>{req.status}</div>\n              </DataRowMain>\n\n              {isTruthy(req.completed) && (\n                <DataRowMain tw=\"text-sm\">\n                  <div>{t('requests.duration')}</div>\n                  <div>\n                    {dayjs\n                      .unix(req.completedDate)\n                      .diff(dayjs.unix(req.startDate))}\n                    ms\n                  </div>\n                </DataRowMain>\n              )}\n\n              {req.pid !== 0 && req.processPath && (\n                <DataRowMain tw=\"text-sm\">\n                  <div>{t('requests.process')}</div>\n                  <div>\n                    {trimPath(req.processPath)}({req.pid})\n                  </div>\n                </DataRowMain>\n              )}\n            </DataGroup>\n\n            <DataGroup>\n              <DataRowMain tw=\"text-sm\">\n                <div>{t('requests.policy_name')}</div>\n                <div>{req.policyName}</div>\n              </DataRowMain>\n              <DataRowMain tw=\"text-sm\">\n                <div>{t('requests.rule_name')}</div>\n                <div>{req.rule}</div>\n              </DataRowMain>\n            </DataGroup>\n\n            {!!req.localAddress && !!req.remoteAddress && (\n              <DataGroup title={t('requests.ip_addr')}>\n                <DataRowMain tw=\"text-sm\">\n                  <div>{t('requests.local_ip')}</div>\n                  <div>{req.localAddress}</div>\n                </DataRowMain>\n                <DataRowMain tw=\"text-sm\">\n                  <div>{t('requests.remote_ip')}</div>\n                  <div>\n                    <a\n                      href={`https://ip.sb/ip/${req.remoteAddress}`}\n                      target=\"_blank\"\n                      rel=\"noreferrer noopener\"\n                    >\n                      <Search\n                        tw=\"inline mr-1 w-3 h-3\"\n                        css={css`\n                          margin-bottom: 2px;\n                        `}\n                      />\n                      {req.remoteAddress}\n                    </a>\n                  </div>\n                </DataRowMain>\n              </DataGroup>\n            )}\n\n            <DataGroup title={t('requests.traffic')}>\n              <DataRowMain tw=\"text-sm\">\n                <div>{t('requests.download')}</div>\n                <div>{bytes(req.inBytes)}</div>\n              </DataRowMain>\n              <DataRowMain tw=\"text-sm\">\n                <div>{t('requests.upload')}</div>\n                <div>{bytes(req.outBytes)}</div>\n              </DataRowMain>\n            </DataGroup>\n\n            <DataGroup title={t('requests.remark')}>\n              <pre\n                tw=\"font-mono text-xs text-gray-600 leading-tight p-3 whitespace-pre-wrap break-words\"\n                css={css`\n                  min-height: 7rem;\n                `}\n              >\n                {req.notes && req.notes.join('\\n')}\n              </pre>\n            </DataGroup>\n\n            {isFalsy(req.completed) && req.method !== 'UDP' && (\n              <DataGroup title=\"Action\">\n                <div\n                  tw=\"text-red-500 p-3 cursor-pointer hover:bg-gray-200\"\n                  onClick={() => killRequest(req.id)}\n                >\n                  {t('requests.kill_connection_button_title')}...\n                </div>\n              </DataGroup>\n            )}\n          </TabPanel>\n\n          <TabPanel>\n            <DataGroup title={t('requests.request_header_title')}>\n              <pre\n                tw=\"font-mono text-xs text-gray-600 leading-tight p-3 whitespace-pre-wrap break-words\"\n                css={css`\n                  min-height: 7rem;\n                `}\n              >\n                {req.requestHeader || ''}\n              </pre>\n            </DataGroup>\n          </TabPanel>\n          <TabPanel>\n            <DataGroup>\n              {req.timingRecords &&\n                req.timingRecords.map((item, index) => (\n                  <DataRowMain key={index} tw=\"text-sm\">\n                    <div>{item.name}</div>\n                    <div>{item.durationInMillisecond}ms</div>\n                  </DataRowMain>\n                ))}\n            </DataGroup>\n          </TabPanel>\n        </Tabs>\n      </TabsWrapper>\n    </ModalWrapper>\n  )\n}\n\nexport default RequestModal\n\nconst trimPath = (str: string): string => basename(str)\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport { useModal } from '@sumup/circuit-ui'\nimport SelectorGroup from '@sumup/circuit-ui/dist/es/components/SelectorGroup'\nimport { useTranslation } from 'react-i18next'\nimport { ListRowRenderer } from 'react-virtualized/dist/es/List'\nimport tw from 'twin.macro'\nimport omit from 'lodash-es/omit'\nimport React, {\n  useState,\n  useCallback,\n  useEffect,\n  ChangeEvent,\n  useMemo,\n} from 'react'\nimport useSWR, { mutate } from 'swr'\nimport { List, AutoSizer } from 'react-virtualized'\nimport { useLocation } from 'react-router-dom'\n\nimport FixedFullscreenContainer from '../../components/FixedFullscreenContainer'\nimport PageTitle from '../../components/PageTitle'\nimport { useProfile } from '../../models/profile'\nimport { RecentRequests, RequestItem } from '../../types'\nimport fetcher from '../../utils/fetcher'\nimport ListItem from './components/ListItem'\nimport RequestModal from './components/RequestModal'\n\nconst LIST_ITEMS_MAX = 150\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search)\n}\n\nconst Page: React.FC = () => {\n  const { setModal } = useModal()\n  const { t } = useTranslation()\n  const profile = useProfile()\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(true)\n  const [group, setGroup] = useState<'recent' | 'active'>('recent')\n  const { data: recentRequestsResponse, error: requestsError } =\n    useSWR<RecentRequests>(() => '/requests/' + group, fetcher, {\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n      dedupingInterval: 1000,\n      refreshInterval: isAutoRefresh\n        ? profile?.platform === 'macos'\n          ? 2000\n          : 4000\n        : 0,\n    })\n  const [requestList, setRequestList] = useState<Array<RequestItem>>([])\n  const [activeRequestList, setActiveRequestList] = useState<\n    Array<RequestItem>\n  >([])\n  const currentList = useMemo(\n    () => (group === 'recent' ? requestList : activeRequestList),\n    [group, requestList, activeRequestList],\n  )\n  const query = useQuery()\n  const sourceIp = useMemo<string | null>(() => query.get('source'), [query])\n\n  useEffect(\n    () => {\n      if (!recentRequestsResponse?.requests) return\n\n      const pendingList = [...recentRequestsResponse.requests]\n      const now = new Date()\n      let newList = [...currentList]\n\n      while (pendingList.length) {\n        const request = pendingList.pop() as RequestItem\n        const existingIndex = newList.findIndex(\n          (item) => item.id === request.id,\n        )\n\n        if (existingIndex >= 0) {\n          Object.assign(newList[existingIndex], {\n            ...omit(request, ['id']),\n            lastUpdated: now,\n          })\n        } else {\n          if (newList.length && request.id > newList[0].id) {\n            newList.unshift({\n              ...request,\n              lastUpdated: now,\n            })\n          } else {\n            newList.push({\n              ...request,\n              lastUpdated: now,\n            })\n          }\n        }\n      }\n\n      if (group === 'recent') {\n        newList = newList\n          .filter((request) => {\n            if (sourceIp) {\n              return sourceIp === request.sourceAddress\n            }\n            return true\n          })\n          .slice(0, LIST_ITEMS_MAX)\n      } else {\n        newList = newList\n          .filter((request) => {\n            if (sourceIp) {\n              return (\n                request.lastUpdated === now &&\n                sourceIp === request.sourceAddress\n              )\n            }\n            return request.lastUpdated === now\n          })\n          .sort((a, b) => b.id - a.id)\n      }\n\n      if (group === 'recent') {\n        setRequestList(newList)\n        setActiveRequestList([])\n      } else {\n        setRequestList([])\n        setActiveRequestList(newList)\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [recentRequestsResponse, group, sourceIp],\n  )\n\n  const openRequestDetail = useCallback(\n    (req: RequestItem) => {\n      setModal({\n        children({ onClose }) {\n          return onClose ? (\n            <RequestModal req={req} onClose={onClose} />\n          ) : (\n            <React.Fragment />\n          )\n        },\n        onClose() {\n          // noop\n        },\n      })\n    },\n    [setModal],\n  )\n\n  const rowRenderer: ListRowRenderer = useCallback(\n    ({\n      key, // Unique key within array of rows\n      index, // Index of row within collection\n      isScrolling, // The List is currently being scrolled\n      isVisible, // This row is visible within the List (eg it is not an overscanned row)\n      style, // Style object to be applied to row (to position it)\n    }) => {\n      const req = currentList[index]\n\n      return (\n        <div\n          key={key}\n          style={style}\n          onClick={() => openRequestDetail(req)}\n          tw=\"flex flex-col justify-center py-2 cursor-pointer hover:bg-gray-100\"\n          css={css`\n            padding-left: calc(env(safe-area-inset-left) + 0.75rem);\n            padding-right: calc(env(safe-area-inset-right) + 0.75rem);\n          `}\n        >\n          <ListItem req={req} />\n        </div>\n      )\n    },\n    [currentList, openRequestDetail],\n  )\n\n  return (\n    <FixedFullscreenContainer>\n      <React.Fragment>\n        <PageTitle\n          title={t('home.requests')}\n          hasAutoRefresh={true}\n          defaultAutoRefreshState={true}\n          onAuthRefreshStateChange={(newState) => setIsAutoRefresh(newState)}\n        />\n\n        <div tw=\"flex-1\">\n          {recentRequestsResponse ? (\n            currentList.length ? (\n              <AutoSizer>\n                {({ width, height }) => {\n                  return (\n                    <List\n                      width={width}\n                      height={height}\n                      rowCount={currentList.length}\n                      rowHeight={64}\n                      rowRenderer={rowRenderer}\n                      style={{\n                        outline: 'none',\n                      }}\n                      css={css`\n                        & > div {\n                          ${tw`divide-y divide-gray-200`}\n                        }\n                      `}\n                    />\n                  )\n                }}\n              </AutoSizer>\n            ) : (\n              <div tw=\"h-full flex items-center justify-center text-base text-gray-500\">\n                {t('common.no_data')}\n              </div>\n            )\n          ) : (\n            <div tw=\"h-full flex items-center justify-center text-base text-gray-500\">\n              {t('common.is_loading')}...\n            </div>\n          )}\n        </div>\n\n        <div\n          css={[\n            tw`flex divide-x divide-gray-200 border-t border-solid border-gray-200 py-2 px-2`,\n            css`\n              & > div {\n                ${tw`mx-2`}\n              }\n              & > div:first-of-type {\n                margin-left: 0;\n              }\n            `,\n          ]}\n        >\n          <SelectorGroup\n            css={[\n              tw`flex justify-center items-center`,\n              css`\n                & label {\n                  ${tw`py-2 px-4 ml-2 my-1 text-sm`}\n                }\n                & label:first-of-type {\n                  margin-left: 0;\n                }\n              `,\n            ]}\n            label=\"choose the dns result group\"\n            name=\"selector-group\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) => {\n              setGroup(() => {\n                const newState = event.target.value as 'recent' | 'active'\n                mutate('/requests/' + newState)\n                return newState\n              })\n            }}\n            options={[\n              {\n                children: t('requests.recent'),\n                value: 'recent',\n              },\n              {\n                children: t('requests.active'),\n                value: 'active',\n              },\n            ]}\n            value={group}\n          />\n        </div>\n      </React.Fragment>\n    </FixedFullscreenContainer>\n  )\n}\n\nexport default Page\n"],"sourceRoot":""}