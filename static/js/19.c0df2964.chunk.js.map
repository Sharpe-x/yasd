{"version":3,"sources":["pages/Index/components/TrafficCell/chart-config.ts","pages/Index/components/TrafficCell/components/LineChart.tsx"],"names":["commonChartOptions","responsive","maintainAspectRatio","responsiveAnimationDuration","animation","duration","title","display","legend","position","labels","fontColor","boxWidth","tooltips","enabled","hover","mode","intersect","animationDuration","scales","xAxes","type","distribution","gridLines","drawTicks","ticks","autoSkip","yAxes","color","borderDash","drawBorder","callback","value","bytes","decimalPlaces","beginAtZero","maxTicksLimit","chartStyles","borderColor","borderWidth","lineTension","pointRadius","backgroundColor","getInitialData","result","i","time","dayjs","subtract","REFRESH_RATE","toDate","push","x","y","LineChart","props","chartRef","useRef","chart","setChart","useState","useEffect","current","c","Chart","options","data","datasets","label","destroy","newDatasets","forEach","newDataset","idx","dataset","newCp","findIndex","cp","length","set","get","CHART_SIZE","splice","update","ref","id","height"],"mappings":"+LAGO,MAAMA,EAAmC,CAC9CC,YAAY,EACZC,qBAAqB,EACrBC,4BAA6B,EAC7BC,UAAW,CACTC,SAAU,KAEZC,MAAO,CACLC,SAAS,GAEXC,OAAQ,CACND,SAAS,EACTE,SAAU,SACVC,OAAQ,CACNC,UAAW,OACXC,SAAU,KAGdC,SAAU,CACRC,SAAS,GAEXC,MAAO,CACLC,KAAM,UACNC,WAAW,EACXC,kBAAmB,GAErBC,OAAQ,CACNC,MAAO,CACL,CACEb,SAAS,EACTc,KAAM,OACNC,aAAc,SACdC,UAAW,CACThB,SAAS,EACTiB,WAAW,GAEbC,MAAO,CACLC,UAAU,KAIhBC,MAAO,CACL,CACEpB,SAAS,EACTgB,UAAW,CACThB,SAAS,EACTqB,MAAO,UACPC,WAAY,CAAC,EAAG,GAChBC,YAAY,EACZN,WAAW,GAEbC,MAAO,CACLM,SAASC,GACAC,IAAMD,EAAO,CAAEE,cAAe,IAAO,MAE9CC,aAAa,EACbC,cAAe,EACfV,UAAU,OAOPW,EACP,CACFC,YAAa,UACbC,YAAa,EACbC,YAAa,GACbC,YAAa,EACbC,gBAAiB,2BANRL,EAQL,CACJC,YAAa,UACbC,YAAa,EACbC,YAAa,GACbC,YAAa,EACbC,gBAAiB,0B,aCYrB,SAASC,IACP,MAAMC,EAAS,GAEf,IAAK,IAAIC,EAAI,EAAGA,EAjFC,GAiFeA,IAAK,CACnC,MAAMC,EAAOC,MACVC,UAnFY,GAmFWH,GAAKI,IAAc,eAC1CC,SAEHN,EAAOO,KAAK,CAAEC,EAAGN,EAAMO,EAAG,IAG5B,OAAOT,EAGMU,UArF8BC,IAC3C,MAAMC,EAAWC,iBAA0B,OACpCC,EAAOC,GAAYC,qBAkE1B,OAhEAC,qBAAU,KACR,IAAKL,EAASM,QAAS,OAEvB,MAAMC,EAAI,IAAIC,IAAMR,EAASM,QAAS,CACpCzC,KAAM,OACN4C,QAASjE,EACTkE,KAAM,CACJC,SAAU,CACR,IACK9B,EACH+B,MAAO,SACPF,KAAMvB,KAER,IACKN,EACH+B,MAAO,WACPF,KAAMvB,SAQd,OAFAgB,EAASI,GAEF,KACDA,GACFA,EAAEM,aAGL,IAEHR,qBAAU,KACJH,IACFH,EAAMe,YAAYC,SAAQ,CAACC,EAAYC,KACrC,GAAIf,EAAMQ,KAAKC,SAAU,CACvB,MAAMO,EAAUhB,EAAMQ,KAAKC,SAASM,GAAKP,KAEzCM,EAAWN,KAAKK,SAASI,IACnBD,EAAQE,WAAWC,GAAOA,EAAGzB,IAAMuB,EAAMvB,IAAK,GAChDsB,EAAQvB,KAAKwB,MAIbD,EAAQI,QAtDH,IAuDPC,YACErB,EACA,2CACAsB,YACEtB,EACC,iBAAgBe,WAAaC,EAAQI,OA5DnC,UAiELJ,EAAQI,QAAUG,IACpBP,EAAQQ,OAAO,EAAG,QAKxBxB,EAAMyB,YAEP,CAACzB,EAAOH,EAAMe,cAEV,sBAAQc,IAAK5B,EAAU6B,GAAI9B,EAAM8B,GAAIC,OAAQ","file":"static/js/19.c0df2964.chunk.js","sourcesContent":["import bytes from 'bytes'\nimport { ChartOptions } from 'chart.js'\n\nexport const commonChartOptions: ChartOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  responsiveAnimationDuration: 0,\n  animation: {\n    duration: 500,\n  },\n  title: {\n    display: false,\n  },\n  legend: {\n    display: true,\n    position: 'bottom',\n    labels: {\n      fontColor: '#ccc',\n      boxWidth: 20,\n    },\n  },\n  tooltips: {\n    enabled: false,\n  },\n  hover: {\n    mode: 'nearest',\n    intersect: true,\n    animationDuration: 0,\n  },\n  scales: {\n    xAxes: [\n      {\n        display: false,\n        type: 'time',\n        distribution: 'series',\n        gridLines: {\n          display: false,\n          drawTicks: false,\n        },\n        ticks: {\n          autoSkip: false,\n        },\n      },\n    ],\n    yAxes: [\n      {\n        display: true,\n        gridLines: {\n          display: true,\n          color: '#c2c2c2',\n          borderDash: [3, 6],\n          drawBorder: false,\n          drawTicks: false,\n        },\n        ticks: {\n          callback(value: number): string {\n            return bytes(value, { decimalPlaces: 0 }) + '/s '\n          },\n          beginAtZero: true,\n          maxTicksLimit: 4,\n          autoSkip: false,\n        },\n      },\n    ],\n  },\n}\n\nexport const chartStyles = {\n  up: {\n    borderColor: '#27c8ae',\n    borderWidth: 2,\n    lineTension: 0.3,\n    pointRadius: 0,\n    backgroundColor: 'rgba(123, 166, 220, .2)',\n  },\n  down: {\n    borderColor: '#f3a956',\n    borderWidth: 2,\n    lineTension: 0.3,\n    pointRadius: 0,\n    backgroundColor: 'rgba(243, 169, 86, .2)',\n  },\n}\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport Chart, { ChartPoint } from 'chart.js'\nimport dayjs from 'dayjs'\nimport tw from 'twin.macro'\nimport set from 'lodash-es/set'\nimport get from 'lodash-es/get'\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport { chartStyles, commonChartOptions } from '../chart-config'\nimport { REFRESH_RATE } from '../index'\n\nconst CHART_SIZE = 30\n\ninterface LineChartProps {\n  id?: string\n  newDatasets: Array<{ data: ChartPoint[]; label: string }>\n}\n\nconst LineChart: React.FC<LineChartProps> = (props) => {\n  const chartRef = useRef<HTMLCanvasElement>(null)\n  const [chart, setChart] = useState<Chart>()\n\n  useEffect(() => {\n    if (!chartRef.current) return\n\n    const c = new Chart(chartRef.current, {\n      type: 'line',\n      options: commonChartOptions,\n      data: {\n        datasets: [\n          {\n            ...chartStyles.up,\n            label: 'Upload',\n            data: getInitialData(),\n          },\n          {\n            ...chartStyles.down,\n            label: 'Download',\n            data: getInitialData(),\n          },\n        ],\n      },\n    })\n\n    setChart(c)\n\n    return () => {\n      if (c) {\n        c.destroy()\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (chart) {\n      props.newDatasets.forEach((newDataset, idx) => {\n        if (chart.data.datasets) {\n          const dataset = chart.data.datasets[idx].data as ChartPoint[]\n\n          newDataset.data.forEach((newCp) => {\n            if (dataset.findIndex((cp) => cp.x === newCp.x) < 0) {\n              dataset.push(newCp)\n            }\n          })\n\n          if (dataset.length >= CHART_SIZE) {\n            set(\n              chart,\n              'config.options.scales.xAxes[0].ticks.min',\n              get(\n                chart,\n                `data.datasets[${idx}].data[${dataset.length - CHART_SIZE}].x`,\n              ),\n            )\n          }\n\n          if (dataset.length >= CHART_SIZE * 2) {\n            dataset.splice(0, 20)\n          }\n        }\n      })\n\n      chart.update()\n    }\n  }, [chart, props.newDatasets])\n\n  return <canvas ref={chartRef} id={props.id} height={200} />\n}\n\nfunction getInitialData(): ChartPoint[] {\n  const result = []\n\n  for (let i = 0; i < CHART_SIZE; i++) {\n    const time = dayjs()\n      .subtract((CHART_SIZE - i) * REFRESH_RATE, 'millisecond')\n      .toDate()\n\n    result.push({ x: time, y: 0 })\n  }\n\n  return result\n}\n\nexport default LineChart\n"],"sourceRoot":""}