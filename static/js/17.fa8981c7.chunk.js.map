{"version":3,"sources":["components/BackButton/index.tsx","components/PageTitle/index.tsx","components/FixedFullscreenContainer.tsx","pages/Dns/index.tsx"],"names":["BackButton","history","useHistory","onClick","goBack","label","css","PageTitle","props","isAutoRefresh","setIsAutoRefresh","useState","defaultAutoRefreshState","isSticky","useMemo","sticky","useEffect","hasAutoRefresh","onAuthRefreshStateChange","size","noMargin","title","FixedFullscreenContainer","offsetBottom","children","Page","t","useTranslation","group","setGroup","data","dnsResult","error","dnsResultError","useSWR","fetcher","list","dnsCache","local","rowRenderer","useCallback","key","index","isScrolling","isVisible","style","record","openIpDetail","ip","window","open","domain","server","join","path","source","comment","width","height","rowCount","length","rowHeight","outline","name","onChange","event","target","value","options","variant","url","method","then","toast","success","mutate","catch","err","console"],"mappings":"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","file":"static/js/17.fa8981c7.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { IconButton } from '@sumup/circuit-ui'\nimport { ChevronLeft } from '@sumup/icons'\nimport React from 'react'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport { useHistory } from 'react-router-dom'\n\nconst BackButton: React.FC = () => {\n  const history = useHistory()\n\n  return (\n    <IconButton\n      onClick={() => history.goBack()}\n      label=\"back\"\n      tw=\"w-8 h-8 mr-3 self-center\"\n      css={css`\n        padding: 0.3rem;\n      `}\n    >\n      <ChevronLeft />\n    </IconButton>\n  )\n}\n\nexport default BackButton\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Heading } from '@sumup/circuit-ui'\nimport { Spinner } from '@sumup/icons'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport BackButton from '../BackButton'\n\ninterface PageTitleProps {\n  title: string\n  hasAutoRefresh?: boolean\n  defaultAutoRefreshState?: boolean\n  onAuthRefreshStateChange?: (newState: boolean) => void\n  sticky?: boolean\n}\n\nconst PageTitle: React.FC<PageTitleProps> = (props) => {\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(\n    () => props.defaultAutoRefreshState ?? false,\n  )\n  const isSticky = useMemo(\n    () => (typeof props.sticky === 'undefined' ? true : props.sticky),\n    [props.sticky],\n  )\n\n  useEffect(() => {\n    if (props.hasAutoRefresh && props.onAuthRefreshStateChange) {\n      props.onAuthRefreshStateChange(isAutoRefresh)\n    }\n  }, [\n    isAutoRefresh,\n    props,\n    props.hasAutoRefresh,\n    props.onAuthRefreshStateChange,\n  ])\n\n  return (\n    <Heading\n      size={'tera'}\n      noMargin\n      css={[\n        isSticky ? tw`sticky top-0` : '',\n        tw`flex items-center justify-between shadow bg-white z-10 px-3 py-3`,\n        css``,\n      ]}\n    >\n      <div\n        tw=\"flex items-center\"\n        css={css`\n          padding-left: env(safe-area-inset-left);\n        `}\n      >\n        <BackButton />\n        <div>{props.title}</div>\n      </div>\n\n      {props.hasAutoRefresh && (\n        <div\n          onClick={() => setIsAutoRefresh(!isAutoRefresh)}\n          css={[\n            tw`bg-blue-500 text-white cursor-pointer w-10 h-10 rounded-lg flex items-center justify-center transition-colors duration-200 ease-in-out`,\n            isAutoRefresh && tw`bg-red-400`,\n            css`\n              margin-right: env(safe-area-inset-right);\n            `,\n          ]}\n        >\n          <Spinner css={[tw`w-6 h-6`, isAutoRefresh && tw`animate-spin`]} />\n        </div>\n      )}\n    </Heading>\n  )\n}\n\nexport default PageTitle\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport React from 'react'\n\nconst FixedFullscreenContainer: React.FC<{\n  offsetBottom?: boolean\n}> = (props) => {\n  let offsetBottom = true\n\n  if (typeof props.offsetBottom === 'boolean') {\n    offsetBottom = props.offsetBottom\n  }\n\n  return (\n    <div\n      css={[\n        tw`fixed top-0 right-0 bottom-0 left-0 h-full overflow-hidden`,\n        offsetBottom\n          ? css`\n              padding-bottom: env(safe-area-inset-bottom);\n            `\n          : '',\n      ]}\n    >\n      <div tw=\"w-full h-full flex flex-col\">{props.children}</div>\n    </div>\n  )\n}\n\nexport default FixedFullscreenContainer\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Button } from '@sumup/circuit-ui'\nimport SelectorGroup from '@sumup/circuit-ui/dist/es/components/SelectorGroup'\nimport React, {\n  ChangeEvent,\n  MouseEventHandler,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport css from '@emotion/css/macro'\nimport { useTranslation } from 'react-i18next'\nimport { toast } from 'react-toastify'\nimport tw from 'twin.macro'\nimport useSWR, { mutate } from 'swr'\nimport { List, AutoSizer, ListRowRenderer } from 'react-virtualized'\n\nimport FixedFullscreenContainer from '../../components/FixedFullscreenContainer'\nimport PageTitle from '../../components/PageTitle'\nimport { DnsResult } from '../../types'\nimport fetcher from '../../utils/fetcher'\n\nconst Page: React.FC = () => {\n  const { t } = useTranslation()\n  const [group, setGroup] = useState<'dynamic' | 'static'>('dynamic')\n  const { data: dnsResult, error: dnsResultError } = useSWR<DnsResult>(\n    '/dns',\n    fetcher,\n  )\n  const list = useMemo(() => {\n    if (group === 'dynamic') {\n      return dnsResult?.dnsCache ?? []\n    }\n    return dnsResult?.local ?? []\n  }, [dnsResult, group])\n\n  const flushDns: MouseEventHandler = () => {\n    fetcher({\n      url: '/dns/flush',\n      method: 'POST',\n    })\n      .then(() => {\n        toast.success(t('common.success_interaction'))\n        return mutate('/dns')\n      })\n      .catch((err) => {\n        toast.error(t('common.failed_interaction'))\n        console.error(err)\n      })\n  }\n\n  const openIpDetail = (ip: string) => {\n    window.open(`https://ip.sb/ip/${ip}`, '_blank', 'noopener noreferrer')\n  }\n\n  const rowRenderer: ListRowRenderer = useCallback(\n    ({\n      key, // Unique key within array of rows\n      index, // Index of row within collection\n      isScrolling, // The List is currently being scrolled\n      isVisible, // This row is visible within the List (eg it is not an overscanned row)\n      style, // Style object to be applied to row (to position it)\n    }) => {\n      if (group === 'dynamic') {\n        const record = (list as DnsResult['dnsCache'])[index]\n\n        return (\n          <div\n            key={key}\n            style={style}\n            onClick={() => openIpDetail(record.data[0])}\n            css={[\n              tw`flex flex-col justify-center py-2`,\n              tw`cursor-pointer hover:bg-gray-100`,\n              css`\n                padding-left: calc(env(safe-area-inset-left) + 0.75rem);\n                padding-right: calc(env(safe-area-inset-right) + 0.75rem);\n              `,\n            ]}\n          >\n            <div tw=\"text-sm truncate\">{record.domain}</div>\n            <div tw=\"text-xs text-gray-700 leading-tight\">\n              DNS: {record.server}\n            </div>\n            <div tw=\"text-xs text-gray-700 leading-tight truncate\">\n              {t('dns.result')}: {record.data.join(', ')}\n            </div>\n            <div tw=\"text-xs text-gray-700 leading-tight truncate\">\n              {t('dns.path')}: {record.path}\n            </div>\n          </div>\n        )\n      } else {\n        const record = (list as DnsResult['local'])[index]\n\n        return (\n          <div\n            key={key}\n            style={style}\n            css={[\n              tw`flex flex-col justify-center py-2`,\n              css`\n                padding-left: calc(env(safe-area-inset-left) + 0.75rem);\n                padding-right: calc(env(safe-area-inset-right) + 0.75rem);\n              `,\n            ]}\n          >\n            <div tw=\"text-sm truncate\">{record.domain}</div>\n            {!!record.server && (\n              <div tw=\"text-xs text-gray-700 leading-tight\">\n                DNS: {record.server}\n              </div>\n            )}\n            <div tw=\"text-xs text-gray-700 leading-tight\">\n              {t('dns.result')}: {record.data ?? 'N/A'}\n            </div>\n            <div tw=\"text-xs text-gray-700 leading-tight\">\n              {t('dns.source')}: {record.source ?? 'N/A'}\n            </div>\n            {!!record.comment && (\n              <div tw=\"text-xs text-gray-700 leading-tight\">\n                {t('dns.comment')}: {record.comment}\n              </div>\n            )}\n          </div>\n        )\n      }\n    },\n    [group, list],\n  )\n\n  return (\n    <FixedFullscreenContainer>\n      <PageTitle title=\"DNS\" />\n\n      <div tw=\"flex-1\">\n        <AutoSizer>\n          {({ width, height }) => {\n            return (\n              <List\n                width={width}\n                height={height}\n                rowCount={list.length}\n                rowHeight={85}\n                rowRenderer={rowRenderer}\n                style={{\n                  outline: 'none',\n                }}\n                css={css`\n                  & > div {\n                    ${tw`divide-y divide-gray-200`}\n                  }\n                `}\n              />\n            )\n          }}\n        </AutoSizer>\n      </div>\n\n      <div\n        css={[\n          tw`flex divide-x divide-gray-200 border-t border-solid border-gray-200 py-2 px-2`,\n          css`\n            & > div {\n              ${tw`mx-2`}\n            }\n            & > div:first-of-type {\n              margin-left: 0;\n            }\n          `,\n        ]}\n      >\n        <SelectorGroup\n          css={[\n            tw`flex justify-center items-center`,\n            css`\n              & label {\n                ${tw`py-2 px-4 ml-2 my-1 text-sm`}\n              }\n              & label:first-of-type {\n                margin-left: 0;\n              }\n            `,\n          ]}\n          label=\"choose the dns result group\"\n          name=\"selector-group\"\n          onChange={(event: ChangeEvent<HTMLInputElement>) => {\n            setGroup(event.target.value as 'dynamic' | 'static')\n          }}\n          options={[\n            {\n              children: t('dns.dynamic'),\n              value: 'dynamic',\n            },\n            {\n              children: t('dns.static'),\n              value: 'static',\n            },\n          ]}\n          value={group}\n        />\n\n        <div tw=\"flex items-center\">\n          <Button\n            tw=\"font-normal\"\n            variant=\"tertiary\"\n            size=\"kilo\"\n            onClick={flushDns}\n          >\n            {t('dns.flush_dns')}\n          </Button>\n        </div>\n      </div>\n    </FixedFullscreenContainer>\n  )\n}\n\nexport default Page\n"],"sourceRoot":""}