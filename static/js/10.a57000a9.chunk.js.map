{"version":3,"sources":["components/BackButton/index.tsx","components/PageTitle/index.tsx","../node_modules/@sumup/icons/dist/es/ChevronLeft.js","components/PageContainer.tsx","../node_modules/@sumup/icons/dist/es/Spinner.js","../node_modules/@sumup/icons/dist/es/ChevronRight.js","../node_modules/is-ip/index.js","../node_modules/ip-regex/index.js","components/ActionsModal.tsx","../node_modules/@sumup/circuit-ui/dist/es/components/Image/index.js","../node_modules/@sumup/circuit-ui/dist/es/components/Image/Image.js","pages/Devices/components/DeviceIcon.tsx","../../src/await-to-js.ts","pages/Devices/components/DeviceSettingsModal.tsx","pages/Devices/components/DeviceItem.tsx","pages/Devices/index.tsx"],"names":["BackButton","history","useHistory","onClick","goBack","label","css","PageTitle","props","isAutoRefresh","setIsAutoRefresh","useState","defaultAutoRefreshState","isSticky","useMemo","sticky","useEffect","hasAutoRefresh","onAuthRefreshStateChange","size","noMargin","title","ChevronLeft","React","createElement","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","defaultProps","width","height","viewBox","fill","xmlns","PageContainer","children","Spinner","ChevronRight","ipRegex","require","isIp","string","exact","test","v4","v6","version","undefined","module","exports","word","b","options","includeBoundaries","v6seg","replace","trim","v46Exact","RegExp","v4exact","v6exact","ip","ActionsModal","onClose","actions","t","useTranslation","ModalWrapper","ModalHeader","map","action","Button","stretch","key","id","variant","Image","styled","img","DeviceIcon","icon","surgeHost","useSurgeHost","src","alt","promise","errorExt","then","data","catch","err","Object","assign","DeviceSettingsModal","dhcpDevice","register","handleSubmit","control","formState","errors","reset","useForm","defaultValues","name","displayName","address","assignedIP","currentIP","shouldHandledBySurge","Boolean","dirtyFields","useFormState","isLoading","setIsLoading","onSubmit","keys","length","payload","physicalAddress","i","result","to","fetcher","method","url","res","error","Error","console","toast","message","mutate","success","warn","Input","invalid","disabled","validationHint","getValidationHint","required","as","defaultValue","isIP","validate","val","render","field","Toggle","labelChecked","labelUnchecked","checked","value","onChange","ModalFooter","align","ButtonGroup","LoadingButton","loadingLabel","DeviceItem","device","setModal","useModal","onDeviceSettingsClick","useCallback","Fragment","push","displayIPAddress","gateway","hasTCPConnection","mode","hasProxyConnection","waitingToReconnect","Data","VersionSupport","macos","ios","bytes","currentSpeed","vendor","dayjs","dhcpLastSeen","format","dhcpHostname","activeConnections","totalConnections","totalBytes","topHostBySingleConnectionTraffic","Page","devices","devicesError","useSWR","revalidateOnFocus","revalidateOnReconnect","refreshInterval","newState","identifier"],"mappings":"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","file":"static/js/10.a57000a9.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { IconButton } from '@sumup/circuit-ui'\nimport { ChevronLeft } from '@sumup/icons'\nimport React from 'react'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport { useHistory } from 'react-router-dom'\n\nconst BackButton: React.FC = () => {\n  const history = useHistory()\n\n  return (\n    <IconButton\n      onClick={() => history.goBack()}\n      label=\"back\"\n      tw=\"w-8 h-8 mr-3 self-center\"\n      css={css`\n        padding: 0.3rem;\n      `}\n    >\n      <ChevronLeft />\n    </IconButton>\n  )\n}\n\nexport default BackButton\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Heading } from '@sumup/circuit-ui'\nimport { Spinner } from '@sumup/icons'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport BackButton from '../BackButton'\n\ninterface PageTitleProps {\n  title: string\n  hasAutoRefresh?: boolean\n  defaultAutoRefreshState?: boolean\n  onAuthRefreshStateChange?: (newState: boolean) => void\n  sticky?: boolean\n}\n\nconst PageTitle: React.FC<PageTitleProps> = (props) => {\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(\n    () => props.defaultAutoRefreshState ?? false,\n  )\n  const isSticky = useMemo(\n    () => (typeof props.sticky === 'undefined' ? true : props.sticky),\n    [props.sticky],\n  )\n\n  useEffect(() => {\n    if (props.hasAutoRefresh && props.onAuthRefreshStateChange) {\n      props.onAuthRefreshStateChange(isAutoRefresh)\n    }\n  }, [\n    isAutoRefresh,\n    props,\n    props.hasAutoRefresh,\n    props.onAuthRefreshStateChange,\n  ])\n\n  return (\n    <Heading\n      size={'tera'}\n      noMargin\n      css={[\n        isSticky ? tw`sticky top-0` : '',\n        tw`flex items-center justify-between shadow bg-white z-10 px-3 py-3`,\n        css``,\n      ]}\n    >\n      <div\n        tw=\"flex items-center\"\n        css={css`\n          padding-left: env(safe-area-inset-left);\n        `}\n      >\n        <BackButton />\n        <div>{props.title}</div>\n      </div>\n\n      {props.hasAutoRefresh && (\n        <div\n          onClick={() => setIsAutoRefresh(!isAutoRefresh)}\n          css={[\n            tw`bg-blue-500 text-white cursor-pointer w-10 h-10 rounded-lg flex items-center justify-center transition-colors duration-200 ease-in-out`,\n            isAutoRefresh && tw`bg-red-400`,\n            css`\n              margin-right: env(safe-area-inset-right);\n            `,\n          ]}\n        >\n          <Spinner css={[tw`w-6 h-6`, isAutoRefresh && tw`animate-spin`]} />\n        </div>\n      )}\n    </Heading>\n  )\n}\n\nexport default PageTitle\n","import React from \"react\";\n\nvar ChevronLeft = function ChevronLeft(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", props, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 4L6 8l4 4\",\n    stroke: \"currentColor\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }));\n};\n\nChevronLeft.defaultProps = {\n  width: \"16\",\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nexport { ChevronLeft };","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport React from 'react'\n\nconst PageContainer: React.FC = ({ children }) => {\n  return <div tw=\"relative pb-5\">{children}</div>\n}\n\nexport default PageContainer\n","import React from \"react\";\n\nvar Spinner = function Spinner(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", props, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2 8a1 1 0 00-2 0h2zm6-8a1 1 0 000 2V0zm6 8a6 6 0 01-6 6v2a8 8 0 008-8h-2zm-6 6a6 6 0 01-6-6H0a8 8 0 008 8v-2zM8 2a6 6 0 016 6h2a8 8 0 00-8-8v2z\",\n    fill: \"currentColor\"\n  }));\n};\n\nSpinner.defaultProps = {\n  width: \"16\",\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nexport { Spinner };","import React from \"react\";\n\nvar ChevronRight = function ChevronRight(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", props, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6 12l4-4-4-4\",\n    stroke: \"currentColor\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }));\n};\n\nChevronRight.defaultProps = {\n  width: \"16\",\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n};\nexport { ChevronRight };","'use strict';\nconst ipRegex = require('ip-regex');\n\nconst isIp = string => ipRegex({exact: true}).test(string);\nisIp.v4 = string => ipRegex.v4({exact: true}).test(string);\nisIp.v6 = string => ipRegex.v6({exact: true}).test(string);\nisIp.version = string => isIp(string) ? (isIp.v4(string) ? 4 : 6) : undefined;\n\nmodule.exports = isIp;\n","'use strict';\n\nconst word = '[a-fA-F\\\\d:]';\nconst b = options => options && options.includeBoundaries ?\n\t`(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))` :\n\t'';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6seg = '[a-fA-F\\\\d]{1,4}';\nconst v6 = `\n(?:\n(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ip = options => options && options.exact ?\n\tv46Exact :\n\tnew RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, 'g');\n\nip.v4 = options => options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, 'g');\nip.v6 = options => options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, 'g');\n\nmodule.exports = ip;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { noop } from 'lodash-es'\nimport { KeyboardEvent, MouseEvent } from 'react'\nimport css from '@emotion/css/macro'\nimport { useTranslation } from 'react-i18next'\nimport tw from 'twin.macro'\nimport {\n  ButtonGroup,\n  Button,\n  ModalFooter,\n  ModalHeader,\n  ModalWrapper,\n} from '@sumup/circuit-ui'\n\ninterface Action {\n  id: number | string\n  title: string\n  onClick: () => void\n}\n\ninterface ActionsModalProps {\n  title: string\n  onClose: (event?: MouseEvent | KeyboardEvent) => void\n  actions: ReadonlyArray<Action>\n}\n\nconst ActionsModal = ({\n  title,\n  onClose,\n  actions,\n}: ActionsModalProps): JSX.Element => {\n  const { t } = useTranslation()\n\n  return (\n    <ModalWrapper>\n      <ModalHeader title={title} onClose={onClose} />\n\n      <div tw=\"space-y-5 pb-5\">\n        {actions.map((action) => (\n          <Button\n            stretch\n            key={action.id}\n            onClick={action.onClick}\n            variant=\"primary\"\n          >\n            {t(action.title)}\n          </Button>\n        ))}\n      </div>\n    </ModalWrapper>\n  )\n}\n\nexport default ActionsModal\n","/**\n * Copyright 2019, SumUp Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Image } from './Image';\nexport default Image;\n","/**\n * Copyright 2019, SumUp Ltd.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { css } from '@emotion/core';\nimport styled from '../../styles/styled';\nconst baseStyles = () => css `\n  label: image;\n  display: block;\n  height: auto;\n  max-height: 100%;\n  width: 100%;\n`;\n/**\n * The Image component. Responsive by default.\n */\nexport const Image = styled.img(baseStyles);\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { Image } from '@sumup/circuit-ui'\nimport React from 'react'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\n\nimport { useSurgeHost } from '../../../models/profile'\n\ninterface DeviceIconProps {\n  icon?: string\n}\n\nconst DeviceIcon = ({ icon }: DeviceIconProps): JSX.Element => {\n  const surgeHost = useSurgeHost()\n\n  return (\n    <div\n      css={css`\n        width: 45px;\n        height: 45px;\n        margin-right: 0.7rem;\n      `}\n    >\n      <Image\n        src={`${surgeHost}/resources/devices-icon?id=${icon || 'default'}`}\n        alt=\"\"\n      />\n    </div>\n  )\n}\n\nexport default DeviceIcon\n","/**\n * @param { Promise } promise\n * @param { Object= } errorExt - Additional Information you can pass to the err object\n * @return { Promise }\n */\nexport function to<T, U = Error> (\n  promise: Promise<T>,\n  errorExt?: object\n): Promise<[U, undefined] | [null, T]> {\n  return promise\n    .then<[null, T]>((data: T) => [null, data])\n    .catch<[U, undefined]>((err: U) => {\n      if (errorExt) {\n        Object.assign(err, errorExt);\n      }\n\n      return [err, undefined];\n    });\n}\n\nexport default to;\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport React, { MouseEvent, KeyboardEvent, useState } from 'react'\nimport {\n  ButtonGroup,\n  Input,\n  LoadingButton,\n  ModalFooter,\n  ModalHeader,\n  ModalWrapper,\n  Toggle,\n} from '@sumup/circuit-ui'\nimport { useTranslation } from 'react-i18next'\nimport tw from 'twin.macro'\nimport { useForm, Controller, useFormState } from 'react-hook-form'\nimport isIP from 'is-ip'\nimport to from 'await-to-js'\nimport { toast } from 'react-toastify'\nimport { mutate } from 'swr'\n\nimport { DHCPDevice } from '../../../types'\nimport fetcher from '../../../utils/fetcher'\nimport { getValidationHint } from '../../../utils/validation'\n\ninterface DeviceSettingsModalProps {\n  title: string\n  dhcpDevice: DHCPDevice\n  onClose: (event?: MouseEvent | KeyboardEvent) => void\n}\n\ninterface FormData {\n  name: string\n  address: string\n  shouldHandledBySurge: boolean\n}\n\nconst DeviceSettingsModal = ({\n  title,\n  dhcpDevice,\n  onClose,\n}: DeviceSettingsModalProps): JSX.Element => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    reset,\n  } = useForm<FormData>({\n    defaultValues: {\n      name: dhcpDevice.displayName,\n      address: dhcpDevice.assignedIP || dhcpDevice.currentIP,\n      shouldHandledBySurge: Boolean(dhcpDevice.shouldHandledBySurge),\n    },\n  })\n  const { dirtyFields } = useFormState({\n    control,\n  })\n  const { t } = useTranslation()\n  const [isLoading, setIsLoading] = useState(false)\n  const onSubmit = (data: FormData) => {\n    if (!Object.keys(dirtyFields).length) {\n      toast.warn(t('devices.err_nothing_changed'))\n      return\n    }\n\n    ;(async () => {\n      setIsLoading(true)\n\n      const payload: Partial<FormData> & {\n        physicalAddress: string\n      } = {\n        physicalAddress: dhcpDevice.physicalAddress,\n      }\n\n      for (const i in dirtyFields) {\n        const key = i as keyof FormData\n        const isDirty = dirtyFields[key]\n\n        if (isDirty) {\n          // @ts-ignore\n          payload[key] = data[key]\n        }\n      }\n\n      const [err, result] = await to(\n        fetcher<{\n          error?: string\n        }>({\n          method: 'POST',\n          url: '/devices',\n          data: payload,\n        }).then((res) => {\n          if (res.error) {\n            throw new Error(res.error)\n          }\n        }),\n      )\n\n      setIsLoading(false)\n\n      if (err) {\n        reset()\n        console.error(err)\n        toast.error(t('common.failed_interaction') + `: ${err.message}`)\n        return\n      }\n\n      mutate('/devices')\n      toast.success(t('common.success_interaction'))\n      onClose()\n    })()\n  }\n\n  return (\n    <ModalWrapper>\n      <ModalHeader\n        title={`${t('devices.modify')} ${title}`}\n        onClose={onClose}\n      />\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div tw=\"pb-5\">\n          <Input\n            invalid={!!errors?.name}\n            disabled={isLoading}\n            validationHint={getValidationHint(\n              {\n                required: t('devices.err_required'),\n              },\n              errors?.name,\n            )}\n            label={t('devices.name')}\n            as=\"input\"\n            defaultValue={dhcpDevice.displayName}\n            {...register('name', { required: true })}\n          />\n          <Input\n            invalid={!!errors?.address}\n            disabled={isLoading}\n            validationHint={getValidationHint(\n              {\n                required: t('devices.err_required'),\n                isIP: t('devices.err_not_ip'),\n              },\n              errors?.address,\n            )}\n            label={t('devices.address')}\n            as=\"input\"\n            defaultValue={dhcpDevice.assignedIP || dhcpDevice.currentIP}\n            {...register('address', {\n              required: true,\n              validate: {\n                isIP: (val) => isIP(val),\n              },\n            })}\n          />\n          <Controller\n            name=\"shouldHandledBySurge\"\n            control={control}\n            render={({ field }) => (\n              <Toggle\n                disabled={isLoading}\n                noMargin\n                label={t('devices.handled_by_surge')}\n                labelChecked=\"on\"\n                labelUnchecked=\"off\"\n                checked={field.value}\n                onChange={() => field.onChange(!field.value)}\n              />\n            )}\n          />\n        </div>\n\n        <ModalFooter align=\"right\">\n          <ButtonGroup>\n            <LoadingButton\n              isLoading={isLoading}\n              variant=\"primary\"\n              as=\"submit\"\n              loadingLabel={t('common.is_loading')}\n            >\n              {t('common.save')}\n            </LoadingButton>\n          </ButtonGroup>\n        </ModalFooter>\n      </form>\n    </ModalWrapper>\n  )\n}\n\nexport default DeviceSettingsModal\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { useModal } from '@sumup/circuit-ui'\nimport { useHistory } from 'react-router-dom'\nimport { noop } from 'lodash-es'\nimport React, { useCallback, useMemo } from 'react'\nimport css from '@emotion/css/macro'\nimport { useTranslation } from 'react-i18next'\nimport tw from 'twin.macro'\nimport bytes from 'bytes'\nimport dayjs from 'dayjs'\nimport { ChevronRight } from '@sumup/icons'\n\nimport ActionsModal from '../../../components/ActionsModal'\nimport { DataRow, DataRowMain, DataRowSub } from '../../../components/Data'\nimport VersionSupport from '../../../components/VersionSupport'\nimport { useSurgeHost } from '../../../models/profile'\nimport { DeviceInfo } from '../../../types'\nimport DeviceIcon from './DeviceIcon'\nimport DeviceSettingsModal from './DeviceSettingsModal'\n\nconst DeviceItem = ({ device }: { device: DeviceInfo }): JSX.Element => {\n  const { t } = useTranslation()\n  const { setModal } = useModal()\n  const surgeHost = useSurgeHost()\n  const history = useHistory()\n\n  const onDeviceSettingsClick = useCallback(() => {\n    setModal({\n      children({ onClose }) {\n        return onClose && device.dhcpDevice ? (\n          <DeviceSettingsModal\n            title={device.dhcpDevice.displayName || device.name}\n            dhcpDevice={device.dhcpDevice}\n            onClose={onClose}\n          />\n        ) : (\n          <React.Fragment />\n        )\n      },\n    })\n  }, [device.dhcpDevice, device.name, setModal])\n\n  const onClick = useCallback(() => {\n    const actions = [\n      {\n        id: 'view_requests',\n        title: 'devices.view_requests',\n        onClick: () => {\n          history.push(`/requests?source=${device.displayIPAddress}`)\n        },\n      },\n    ]\n\n    if (device.dhcpDevice) {\n      actions.push({\n        id: 'device_settings',\n        title: 'devices.device_settings',\n        onClick: onDeviceSettingsClick,\n      })\n    }\n\n    setModal({\n      children({ onClose }) {\n        return onClose ? (\n          <ActionsModal\n            title={device?.dhcpDevice?.displayName || device.name}\n            actions={actions}\n            onClose={onClose}\n          />\n        ) : (\n          <React.Fragment />\n        )\n      },\n    })\n  }, [\n    device.dhcpDevice,\n    device.displayIPAddress,\n    device.name,\n    onDeviceSettingsClick,\n    setModal,\n    history,\n  ])\n\n  const gateway = useMemo<boolean>(() => {\n    const { hasTCPConnection } = device\n    return hasTCPConnection || Boolean(device?.dhcpDevice?.shouldHandledBySurge)\n  }, [device])\n\n  const mode = useMemo<string>(() => {\n    let result = t('devices.not_handled_by_surge')\n    const { hasProxyConnection } = device\n\n    if (gateway && hasProxyConnection) {\n      result = t('devices.proxy_and_gateway_mode')\n    } else if (hasProxyConnection) {\n      result = t('devices.proxy_mode')\n    } else if (gateway) {\n      result = t('devices.gateway_mode')\n    }\n\n    return result\n  }, [t, device, gateway])\n\n  const waitingToReconnect = useMemo<boolean>(() => {\n    return Boolean(device?.dhcpDevice?.waitingToReconnect)\n  }, [device.dhcpDevice])\n\n  return (\n    <DataRow tw=\"hover:bg-gray-100 cursor-pointer\" onClick={onClick}>\n      <DataRowMain>\n        <div tw=\"flex items-center w-full overflow-hidden\">\n          {surgeHost ? (\n            <VersionSupport macos=\"4.1.1\" ios=\"4.11.0\">\n              <div tw=\"flex-1\">\n                <DeviceIcon icon={device.dhcpDevice?.icon} />\n              </div>\n            </VersionSupport>\n          ) : (\n            <React.Fragment />\n          )}\n          <div tw=\"w-full overflow-hidden\">\n            <div tw=\"truncate pr-5\">{device.name}</div>\n            <div tw=\"text-sm text-gray-600\">{device.displayIPAddress}</div>\n          </div>\n        </div>\n        <div tw=\"flex items-center flex-1 font-bold\">\n          {waitingToReconnect ? (\n            <div\n              css={css`\n                white-space: nowrap;\n              `}\n            >\n              {t('devices.waiting')}\n            </div>\n          ) : (\n            (gateway || device.hasProxyConnection) && (\n              <div>{bytes(device.currentSpeed) + '/s'}</div>\n            )\n          )}\n\n          <div tw=\"ml-3\">\n            <ChevronRight />\n          </div>\n        </div>\n      </DataRowMain>\n      <div tw=\"pb-3\">\n        <DataRowSub>\n          <div>{t('devices.mac_address')}</div>\n          <div>{device.physicalAddress || 'N/A'}</div>\n        </DataRowSub>\n        <DataRowSub>\n          <div>{t('devices.vendor')}</div>\n          <div>{device.vendor || 'N/A'}</div>\n        </DataRowSub>\n\n        {device.dhcpDevice ? (\n          <React.Fragment>\n            <DataRowSub>\n              <div>{t('devices.dhcp_last_seen')}</div>\n              <div>{dayjs(device.dhcpDevice.dhcpLastSeen).format('L LTS')}</div>\n            </DataRowSub>\n            <DataRowSub>\n              <div>{t('devices.dhcp_hostname')}</div>\n              <div>{device.dhcpDevice.dhcpHostname || 'N/A'}</div>\n            </DataRowSub>\n          </React.Fragment>\n        ) : null}\n\n        {(device.hasTCPConnection || device.hasProxyConnection) && (\n          <React.Fragment>\n            <DataRowSub>\n              <div>{t('devices.active_connections')}</div>\n              <div>{device.activeConnections}</div>\n            </DataRowSub>\n            <DataRowSub>\n              <div>{t('devices.total_connections')}</div>\n              <div>{device.totalConnections}</div>\n            </DataRowSub>\n            <DataRowSub>\n              <div>{t('devices.total_bytes')}</div>\n              <div>{bytes(device.totalBytes)}</div>\n            </DataRowSub>\n            <DataRowSub>\n              <div>{t('devices.top_host')}</div>\n              <div>{device.topHostBySingleConnectionTraffic || 'N/A'}</div>\n            </DataRowSub>\n          </React.Fragment>\n        )}\n\n        <DataRowSub>\n          <div>{t('devices.mode')}</div>\n          <div>{mode}</div>\n        </DataRowSub>\n      </div>\n    </DataRow>\n  )\n}\n\nexport default DeviceItem\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport React, { useState } from 'react'\nimport css from '@emotion/css/macro'\nimport tw from 'twin.macro'\nimport { useTranslation } from 'react-i18next'\nimport useSWR from 'swr'\n\nimport PageContainer from '../../components/PageContainer'\nimport PageTitle from '../../components/PageTitle'\nimport { DevicesResult } from '../../types'\nimport fetcher from '../../utils/fetcher'\nimport DeviceItem from './components/DeviceItem'\n\nconst Page = (): JSX.Element => {\n  const { t } = useTranslation()\n  const [isAutoRefresh, setIsAutoRefresh] = useState<boolean>(false)\n  const { data: devices, error: devicesError } = useSWR<DevicesResult>(\n    '/devices',\n    fetcher,\n    {\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n      refreshInterval: isAutoRefresh ? 2000 : 0,\n    },\n  )\n\n  return (\n    <PageContainer>\n      <PageTitle\n        title={t('home.device_management')}\n        hasAutoRefresh={true}\n        defaultAutoRefreshState={false}\n        onAuthRefreshStateChange={(newState) => setIsAutoRefresh(newState)}\n      />\n\n      <div tw=\"divide-y divide-gray-200\">\n        {devices?.devices &&\n          devices.devices.map((device) => (\n            <div key={device.identifier}>\n              <DeviceItem device={device} />\n            </div>\n          ))}\n      </div>\n    </PageContainer>\n  )\n}\n\nexport default Page\n"],"sourceRoot":""}